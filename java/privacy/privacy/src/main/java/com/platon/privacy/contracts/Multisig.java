package com.platon.privacy.contracts;

import com.alaya.abi.wasm.WasmEventEncoder;
import com.alaya.abi.wasm.WasmFunctionEncoder;
import com.alaya.abi.wasm.datatypes.WasmEvent;
import com.alaya.abi.wasm.datatypes.WasmEventParameter;
import com.alaya.abi.wasm.datatypes.WasmFunction;
import com.alaya.crypto.Credentials;
import com.alaya.protocol.Web3j;
import com.alaya.protocol.core.DefaultBlockParameter;
import com.alaya.protocol.core.RemoteCall;
import com.alaya.protocol.core.methods.request.PlatonFilter;
import com.alaya.protocol.core.methods.response.Log;
import com.alaya.protocol.core.methods.response.TransactionReceipt;
import com.alaya.rlp.wasm.datatypes.Int64;
import com.alaya.rlp.wasm.datatypes.Uint128;
import com.alaya.rlp.wasm.datatypes.Uint16;
import com.alaya.rlp.wasm.datatypes.Uint32;
import com.alaya.rlp.wasm.datatypes.WasmAddress;
import com.alaya.tx.TransactionManager;
import com.alaya.tx.WasmContract;
import com.alaya.tx.gas.GasProvider;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://github.com/PlatONnetwork/client-sdk-java/releases">platon-web3j command line tools</a>,
 * or the com.alaya.codegen.WasmFunctionWrapperGenerator in the 
 * <a href="https://github.com/PlatONnetwork/client-sdk-java/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with platon-web3j version none.
 */
public class Multisig extends WasmContract {
    private static String BINARY_0 = "";

    public static String BINARY = BINARY_0;

    public static final String FUNC_GETREQUIRED = "GetRequired";

    public static final String FUNC_GETPENDINGTRANSACTIONS = "GetPendingTransactions";

    public static final String FUNC_SIGNTRANSACTION = "SignTransaction";

    public static final String FUNC_CHANGEOWNERSANDREQUIRED = "ChangeOwnersAndRequired";

    public static final String FUNC_GETOWNERS = "GetOwners";

    public static final String FUNC_CREATECONTRACT = "CreateContract";

    public static final String FUNC_CLONECONTRACT = "CloneContract";

    public static final String FUNC_PUSHTRANSACTION = "PushTransaction";

    public static final String FUNC_GETTRANSACTIONINFO = "GetTransactionInfo";

    public static final WasmEvent PRIVACYREVERTEVENT_EVENT = new WasmEvent("PrivacyRevertEvent", Arrays.asList(), Arrays.asList(new WasmEventParameter(String.class)));
    ;

    public static final WasmEvent MULTISIGCREATE_EVENT = new WasmEvent("MultisigCreate", Arrays.asList(new WasmEventParameter(WasmAddress.class, true) , new WasmEventParameter(Uint32.class, true)), Arrays.asList(new WasmEventParameter(WasmAddress.class)));
    ;

    public static final WasmEvent CREATEMULTISIG_EVENT = new WasmEvent("CreateMultisig", Arrays.asList(new WasmEventParameter(WasmAddress.class, true)), Arrays.asList(new WasmEventParameter(WasmAddress[].class) , new WasmEventParameter(Uint16.class)));
    ;

    public static final WasmEvent CHANGEMULTISIG_EVENT = new WasmEvent("ChangeMultisig", Arrays.asList(new WasmEventParameter(WasmAddress.class, true)), Arrays.asList(new WasmEventParameter(WasmAddress[].class) , new WasmEventParameter(Uint16.class)));
    ;

    public static final WasmEvent NEWMULTISIGTRANSACTION_EVENT = new WasmEvent("NewMultisigTransaction", Arrays.asList(new WasmEventParameter(WasmAddress.class, true) , new WasmEventParameter(Uint32.class, true)), Arrays.asList(new WasmEventParameter(WasmAddress.class) , new WasmEventParameter(WasmAddress.class) , new WasmEventParameter(byte[].class) , new WasmEventParameter(Uint32.class)));
    ;

    public static final WasmEvent SIGNMULTISIGTRANSACTION_EVENT = new WasmEvent("SignMultisigTransaction", Arrays.asList(new WasmEventParameter(WasmAddress.class, true) , new WasmEventParameter(Uint32.class, true)), Arrays.asList(new WasmEventParameter(WasmAddress.class)));
    ;

    public static final WasmEvent MULTISIGTRANSACTIONTIMEOUT_EVENT = new WasmEvent("MultisigTransactionTimeout", Arrays.asList(new WasmEventParameter(WasmAddress.class, true) , new WasmEventParameter(Uint32.class, true)), Arrays.asList());
    ;

    public static final WasmEvent MULTISIGTRANSACTIONEXECUTE_EVENT = new WasmEvent("MultisigTransactionExecute", Arrays.asList(new WasmEventParameter(WasmAddress.class, true) , new WasmEventParameter(Uint32.class, true)), Arrays.asList(new WasmEventParameter(WasmAddress[].class)));
    ;

    public static final WasmEvent MULTISIGCLONE_EVENT = new WasmEvent("MultisigClone", Arrays.asList(new WasmEventParameter(WasmAddress.class, true) , new WasmEventParameter(Uint32.class, true)), Arrays.asList(new WasmEventParameter(WasmAddress.class)));
    ;

    public static final WasmEvent TRANSFEREVENT_EVENT = new WasmEvent("TransferEvent", Arrays.asList(new WasmEventParameter(WasmAddress.class, true) , new WasmEventParameter(WasmAddress.class, true)), Arrays.asList(new WasmEventParameter(Uint128.class)));
    ;

    public static final WasmEvent APPROVALEVENT_EVENT = new WasmEvent("ApprovalEvent", Arrays.asList(new WasmEventParameter(WasmAddress.class, true) , new WasmEventParameter(WasmAddress.class, true)), Arrays.asList(new WasmEventParameter(Uint128.class)));
    ;

    protected Multisig(String contractAddress, Web3j web3j, Credentials credentials, GasProvider contractGasProvider, Long chainId) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider, chainId);
    }

    protected Multisig(String contractAddress, Web3j web3j, TransactionManager transactionManager, GasProvider contractGasProvider, Long chainId) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider, chainId);
    }

    public RemoteCall<Uint16> GetRequired() {
        final WasmFunction function = new WasmFunction(FUNC_GETREQUIRED, Arrays.asList(), Uint16.class);
        return executeRemoteCall(function, Uint16.class);
    }

    public List<PrivacyRevertEventEventResponse> getPrivacyRevertEventEvents(TransactionReceipt transactionReceipt) {
        List<WasmContract.WasmEventValuesWithLog> valueList = extractEventParametersWithLog(PRIVACYREVERTEVENT_EVENT, transactionReceipt);
        ArrayList<PrivacyRevertEventEventResponse> responses = new ArrayList<PrivacyRevertEventEventResponse>(valueList.size());
        for (WasmContract.WasmEventValuesWithLog eventValues : valueList) {
            PrivacyRevertEventEventResponse typedResponse = new PrivacyRevertEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.arg1 = (String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<PrivacyRevertEventEventResponse> privacyRevertEventEventObservable(PlatonFilter filter) {
        return web3j.platonLogObservable(filter).map(new Func1<Log, PrivacyRevertEventEventResponse>() {
            @Override
            public PrivacyRevertEventEventResponse call(Log log) {
                WasmContract.WasmEventValuesWithLog eventValues = extractEventParametersWithLog(PRIVACYREVERTEVENT_EVENT, log);
                PrivacyRevertEventEventResponse typedResponse = new PrivacyRevertEventEventResponse();
                typedResponse.log = log;
                typedResponse.arg1 = (String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Observable<PrivacyRevertEventEventResponse> privacyRevertEventEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        PlatonFilter filter = new PlatonFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(WasmEventEncoder.encode(PRIVACYREVERTEVENT_EVENT));
        return privacyRevertEventEventObservable(filter);
    }

    public RemoteCall<Transaction[]> GetPendingTransactions() {
        final WasmFunction function = new WasmFunction(FUNC_GETPENDINGTRANSACTIONS, Arrays.asList(), Transaction[].class);
        return executeRemoteCall(function, Transaction[].class);
    }

    public List<MultisigCreateEventResponse> getMultisigCreateEvents(TransactionReceipt transactionReceipt) {
        List<WasmContract.WasmEventValuesWithLog> valueList = extractEventParametersWithLog(MULTISIGCREATE_EVENT, transactionReceipt);
        ArrayList<MultisigCreateEventResponse> responses = new ArrayList<MultisigCreateEventResponse>(valueList.size());
        for (WasmContract.WasmEventValuesWithLog eventValues : valueList) {
            MultisigCreateEventResponse typedResponse = new MultisigCreateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.topic1 = (String) eventValues.getIndexedValues().get(0);
            typedResponse.topic2 = (String) eventValues.getIndexedValues().get(1);
            typedResponse.arg1 = (WasmAddress) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<MultisigCreateEventResponse> multisigCreateEventObservable(PlatonFilter filter) {
        return web3j.platonLogObservable(filter).map(new Func1<Log, MultisigCreateEventResponse>() {
            @Override
            public MultisigCreateEventResponse call(Log log) {
                WasmContract.WasmEventValuesWithLog eventValues = extractEventParametersWithLog(MULTISIGCREATE_EVENT, log);
                MultisigCreateEventResponse typedResponse = new MultisigCreateEventResponse();
                typedResponse.log = log;
                typedResponse.topic1 = (String) eventValues.getIndexedValues().get(0);
                typedResponse.topic2 = (String) eventValues.getIndexedValues().get(1);
                typedResponse.arg1 = (WasmAddress) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Observable<MultisigCreateEventResponse> multisigCreateEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        PlatonFilter filter = new PlatonFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(WasmEventEncoder.encode(MULTISIGCREATE_EVENT));
        return multisigCreateEventObservable(filter);
    }

    public List<CreateMultisigEventResponse> getCreateMultisigEvents(TransactionReceipt transactionReceipt) {
        List<WasmContract.WasmEventValuesWithLog> valueList = extractEventParametersWithLog(CREATEMULTISIG_EVENT, transactionReceipt);
        ArrayList<CreateMultisigEventResponse> responses = new ArrayList<CreateMultisigEventResponse>(valueList.size());
        for (WasmContract.WasmEventValuesWithLog eventValues : valueList) {
            CreateMultisigEventResponse typedResponse = new CreateMultisigEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.topic = (String) eventValues.getIndexedValues().get(0);
            typedResponse.arg1 = (WasmAddress[]) eventValues.getNonIndexedValues().get(0);
            typedResponse.arg2 = (Uint16) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<CreateMultisigEventResponse> createMultisigEventObservable(PlatonFilter filter) {
        return web3j.platonLogObservable(filter).map(new Func1<Log, CreateMultisigEventResponse>() {
            @Override
            public CreateMultisigEventResponse call(Log log) {
                WasmContract.WasmEventValuesWithLog eventValues = extractEventParametersWithLog(CREATEMULTISIG_EVENT, log);
                CreateMultisigEventResponse typedResponse = new CreateMultisigEventResponse();
                typedResponse.log = log;
                typedResponse.topic = (String) eventValues.getIndexedValues().get(0);
                typedResponse.arg1 = (WasmAddress[]) eventValues.getNonIndexedValues().get(0);
                typedResponse.arg2 = (Uint16) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<CreateMultisigEventResponse> createMultisigEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        PlatonFilter filter = new PlatonFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(WasmEventEncoder.encode(CREATEMULTISIG_EVENT));
        return createMultisigEventObservable(filter);
    }

    public List<ChangeMultisigEventResponse> getChangeMultisigEvents(TransactionReceipt transactionReceipt) {
        List<WasmContract.WasmEventValuesWithLog> valueList = extractEventParametersWithLog(CHANGEMULTISIG_EVENT, transactionReceipt);
        ArrayList<ChangeMultisigEventResponse> responses = new ArrayList<ChangeMultisigEventResponse>(valueList.size());
        for (WasmContract.WasmEventValuesWithLog eventValues : valueList) {
            ChangeMultisigEventResponse typedResponse = new ChangeMultisigEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.topic = (String) eventValues.getIndexedValues().get(0);
            typedResponse.arg1 = (WasmAddress[]) eventValues.getNonIndexedValues().get(0);
            typedResponse.arg2 = (Uint16) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ChangeMultisigEventResponse> changeMultisigEventObservable(PlatonFilter filter) {
        return web3j.platonLogObservable(filter).map(new Func1<Log, ChangeMultisigEventResponse>() {
            @Override
            public ChangeMultisigEventResponse call(Log log) {
                WasmContract.WasmEventValuesWithLog eventValues = extractEventParametersWithLog(CHANGEMULTISIG_EVENT, log);
                ChangeMultisigEventResponse typedResponse = new ChangeMultisigEventResponse();
                typedResponse.log = log;
                typedResponse.topic = (String) eventValues.getIndexedValues().get(0);
                typedResponse.arg1 = (WasmAddress[]) eventValues.getNonIndexedValues().get(0);
                typedResponse.arg2 = (Uint16) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<ChangeMultisigEventResponse> changeMultisigEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        PlatonFilter filter = new PlatonFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(WasmEventEncoder.encode(CHANGEMULTISIG_EVENT));
        return changeMultisigEventObservable(filter);
    }

    public List<NewMultisigTransactionEventResponse> getNewMultisigTransactionEvents(TransactionReceipt transactionReceipt) {
        List<WasmContract.WasmEventValuesWithLog> valueList = extractEventParametersWithLog(NEWMULTISIGTRANSACTION_EVENT, transactionReceipt);
        ArrayList<NewMultisigTransactionEventResponse> responses = new ArrayList<NewMultisigTransactionEventResponse>(valueList.size());
        for (WasmContract.WasmEventValuesWithLog eventValues : valueList) {
            NewMultisigTransactionEventResponse typedResponse = new NewMultisigTransactionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.topic1 = (String) eventValues.getIndexedValues().get(0);
            typedResponse.topic2 = (String) eventValues.getIndexedValues().get(1);
            typedResponse.arg1 = (WasmAddress) eventValues.getNonIndexedValues().get(0);
            typedResponse.arg2 = (WasmAddress) eventValues.getNonIndexedValues().get(1);
            typedResponse.arg3 = (byte[]) eventValues.getNonIndexedValues().get(2);
            typedResponse.arg4 = (Uint32) eventValues.getNonIndexedValues().get(3);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewMultisigTransactionEventResponse> newMultisigTransactionEventObservable(PlatonFilter filter) {
        return web3j.platonLogObservable(filter).map(new Func1<Log, NewMultisigTransactionEventResponse>() {
            @Override
            public NewMultisigTransactionEventResponse call(Log log) {
                WasmContract.WasmEventValuesWithLog eventValues = extractEventParametersWithLog(NEWMULTISIGTRANSACTION_EVENT, log);
                NewMultisigTransactionEventResponse typedResponse = new NewMultisigTransactionEventResponse();
                typedResponse.log = log;
                typedResponse.topic1 = (String) eventValues.getIndexedValues().get(0);
                typedResponse.topic2 = (String) eventValues.getIndexedValues().get(1);
                typedResponse.arg1 = (WasmAddress) eventValues.getNonIndexedValues().get(0);
                typedResponse.arg2 = (WasmAddress) eventValues.getNonIndexedValues().get(1);
                typedResponse.arg3 = (byte[]) eventValues.getNonIndexedValues().get(2);
                typedResponse.arg4 = (Uint32) eventValues.getNonIndexedValues().get(3);
                return typedResponse;
            }
        });
    }

    public Observable<NewMultisigTransactionEventResponse> newMultisigTransactionEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        PlatonFilter filter = new PlatonFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(WasmEventEncoder.encode(NEWMULTISIGTRANSACTION_EVENT));
        return newMultisigTransactionEventObservable(filter);
    }

    public List<SignMultisigTransactionEventResponse> getSignMultisigTransactionEvents(TransactionReceipt transactionReceipt) {
        List<WasmContract.WasmEventValuesWithLog> valueList = extractEventParametersWithLog(SIGNMULTISIGTRANSACTION_EVENT, transactionReceipt);
        ArrayList<SignMultisigTransactionEventResponse> responses = new ArrayList<SignMultisigTransactionEventResponse>(valueList.size());
        for (WasmContract.WasmEventValuesWithLog eventValues : valueList) {
            SignMultisigTransactionEventResponse typedResponse = new SignMultisigTransactionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.topic1 = (String) eventValues.getIndexedValues().get(0);
            typedResponse.topic2 = (String) eventValues.getIndexedValues().get(1);
            typedResponse.arg1 = (WasmAddress) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SignMultisigTransactionEventResponse> signMultisigTransactionEventObservable(PlatonFilter filter) {
        return web3j.platonLogObservable(filter).map(new Func1<Log, SignMultisigTransactionEventResponse>() {
            @Override
            public SignMultisigTransactionEventResponse call(Log log) {
                WasmContract.WasmEventValuesWithLog eventValues = extractEventParametersWithLog(SIGNMULTISIGTRANSACTION_EVENT, log);
                SignMultisigTransactionEventResponse typedResponse = new SignMultisigTransactionEventResponse();
                typedResponse.log = log;
                typedResponse.topic1 = (String) eventValues.getIndexedValues().get(0);
                typedResponse.topic2 = (String) eventValues.getIndexedValues().get(1);
                typedResponse.arg1 = (WasmAddress) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Observable<SignMultisigTransactionEventResponse> signMultisigTransactionEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        PlatonFilter filter = new PlatonFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(WasmEventEncoder.encode(SIGNMULTISIGTRANSACTION_EVENT));
        return signMultisigTransactionEventObservable(filter);
    }

    public List<MultisigTransactionTimeoutEventResponse> getMultisigTransactionTimeoutEvents(TransactionReceipt transactionReceipt) {
        List<WasmContract.WasmEventValuesWithLog> valueList = extractEventParametersWithLog(MULTISIGTRANSACTIONTIMEOUT_EVENT, transactionReceipt);
        ArrayList<MultisigTransactionTimeoutEventResponse> responses = new ArrayList<MultisigTransactionTimeoutEventResponse>(valueList.size());
        for (WasmContract.WasmEventValuesWithLog eventValues : valueList) {
            MultisigTransactionTimeoutEventResponse typedResponse = new MultisigTransactionTimeoutEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.topic1 = (String) eventValues.getIndexedValues().get(0);
            typedResponse.topic2 = (String) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<MultisigTransactionTimeoutEventResponse> multisigTransactionTimeoutEventObservable(PlatonFilter filter) {
        return web3j.platonLogObservable(filter).map(new Func1<Log, MultisigTransactionTimeoutEventResponse>() {
            @Override
            public MultisigTransactionTimeoutEventResponse call(Log log) {
                WasmContract.WasmEventValuesWithLog eventValues = extractEventParametersWithLog(MULTISIGTRANSACTIONTIMEOUT_EVENT, log);
                MultisigTransactionTimeoutEventResponse typedResponse = new MultisigTransactionTimeoutEventResponse();
                typedResponse.log = log;
                typedResponse.topic1 = (String) eventValues.getIndexedValues().get(0);
                typedResponse.topic2 = (String) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<MultisigTransactionTimeoutEventResponse> multisigTransactionTimeoutEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        PlatonFilter filter = new PlatonFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(WasmEventEncoder.encode(MULTISIGTRANSACTIONTIMEOUT_EVENT));
        return multisigTransactionTimeoutEventObservable(filter);
    }

    public List<MultisigTransactionExecuteEventResponse> getMultisigTransactionExecuteEvents(TransactionReceipt transactionReceipt) {
        List<WasmContract.WasmEventValuesWithLog> valueList = extractEventParametersWithLog(MULTISIGTRANSACTIONEXECUTE_EVENT, transactionReceipt);
        ArrayList<MultisigTransactionExecuteEventResponse> responses = new ArrayList<MultisigTransactionExecuteEventResponse>(valueList.size());
        for (WasmContract.WasmEventValuesWithLog eventValues : valueList) {
            MultisigTransactionExecuteEventResponse typedResponse = new MultisigTransactionExecuteEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.topic1 = (String) eventValues.getIndexedValues().get(0);
            typedResponse.topic2 = (String) eventValues.getIndexedValues().get(1);
            typedResponse.arg1 = (WasmAddress[]) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<MultisigTransactionExecuteEventResponse> multisigTransactionExecuteEventObservable(PlatonFilter filter) {
        return web3j.platonLogObservable(filter).map(new Func1<Log, MultisigTransactionExecuteEventResponse>() {
            @Override
            public MultisigTransactionExecuteEventResponse call(Log log) {
                WasmContract.WasmEventValuesWithLog eventValues = extractEventParametersWithLog(MULTISIGTRANSACTIONEXECUTE_EVENT, log);
                MultisigTransactionExecuteEventResponse typedResponse = new MultisigTransactionExecuteEventResponse();
                typedResponse.log = log;
                typedResponse.topic1 = (String) eventValues.getIndexedValues().get(0);
                typedResponse.topic2 = (String) eventValues.getIndexedValues().get(1);
                typedResponse.arg1 = (WasmAddress[]) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Observable<MultisigTransactionExecuteEventResponse> multisigTransactionExecuteEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        PlatonFilter filter = new PlatonFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(WasmEventEncoder.encode(MULTISIGTRANSACTIONEXECUTE_EVENT));
        return multisigTransactionExecuteEventObservable(filter);
    }

    public List<MultisigCloneEventResponse> getMultisigCloneEvents(TransactionReceipt transactionReceipt) {
        List<WasmContract.WasmEventValuesWithLog> valueList = extractEventParametersWithLog(MULTISIGCLONE_EVENT, transactionReceipt);
        ArrayList<MultisigCloneEventResponse> responses = new ArrayList<MultisigCloneEventResponse>(valueList.size());
        for (WasmContract.WasmEventValuesWithLog eventValues : valueList) {
            MultisigCloneEventResponse typedResponse = new MultisigCloneEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.topic1 = (String) eventValues.getIndexedValues().get(0);
            typedResponse.topic2 = (String) eventValues.getIndexedValues().get(1);
            typedResponse.arg1 = (WasmAddress) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<MultisigCloneEventResponse> multisigCloneEventObservable(PlatonFilter filter) {
        return web3j.platonLogObservable(filter).map(new Func1<Log, MultisigCloneEventResponse>() {
            @Override
            public MultisigCloneEventResponse call(Log log) {
                WasmContract.WasmEventValuesWithLog eventValues = extractEventParametersWithLog(MULTISIGCLONE_EVENT, log);
                MultisigCloneEventResponse typedResponse = new MultisigCloneEventResponse();
                typedResponse.log = log;
                typedResponse.topic1 = (String) eventValues.getIndexedValues().get(0);
                typedResponse.topic2 = (String) eventValues.getIndexedValues().get(1);
                typedResponse.arg1 = (WasmAddress) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Observable<MultisigCloneEventResponse> multisigCloneEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        PlatonFilter filter = new PlatonFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(WasmEventEncoder.encode(MULTISIGCLONE_EVENT));
        return multisigCloneEventObservable(filter);
    }

    public List<TransferEventEventResponse> getTransferEventEvents(TransactionReceipt transactionReceipt) {
        List<WasmContract.WasmEventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFEREVENT_EVENT, transactionReceipt);
        ArrayList<TransferEventEventResponse> responses = new ArrayList<TransferEventEventResponse>(valueList.size());
        for (WasmContract.WasmEventValuesWithLog eventValues : valueList) {
            TransferEventEventResponse typedResponse = new TransferEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.topic1 = (String) eventValues.getIndexedValues().get(0);
            typedResponse.topic2 = (String) eventValues.getIndexedValues().get(1);
            typedResponse.arg1 = (Uint128) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TransferEventEventResponse> transferEventEventObservable(PlatonFilter filter) {
        return web3j.platonLogObservable(filter).map(new Func1<Log, TransferEventEventResponse>() {
            @Override
            public TransferEventEventResponse call(Log log) {
                WasmContract.WasmEventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFEREVENT_EVENT, log);
                TransferEventEventResponse typedResponse = new TransferEventEventResponse();
                typedResponse.log = log;
                typedResponse.topic1 = (String) eventValues.getIndexedValues().get(0);
                typedResponse.topic2 = (String) eventValues.getIndexedValues().get(1);
                typedResponse.arg1 = (Uint128) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Observable<TransferEventEventResponse> transferEventEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        PlatonFilter filter = new PlatonFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(WasmEventEncoder.encode(TRANSFEREVENT_EVENT));
        return transferEventEventObservable(filter);
    }

    public List<ApprovalEventEventResponse> getApprovalEventEvents(TransactionReceipt transactionReceipt) {
        List<WasmContract.WasmEventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALEVENT_EVENT, transactionReceipt);
        ArrayList<ApprovalEventEventResponse> responses = new ArrayList<ApprovalEventEventResponse>(valueList.size());
        for (WasmContract.WasmEventValuesWithLog eventValues : valueList) {
            ApprovalEventEventResponse typedResponse = new ApprovalEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.topic1 = (String) eventValues.getIndexedValues().get(0);
            typedResponse.topic2 = (String) eventValues.getIndexedValues().get(1);
            typedResponse.arg1 = (Uint128) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ApprovalEventEventResponse> approvalEventEventObservable(PlatonFilter filter) {
        return web3j.platonLogObservable(filter).map(new Func1<Log, ApprovalEventEventResponse>() {
            @Override
            public ApprovalEventEventResponse call(Log log) {
                WasmContract.WasmEventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALEVENT_EVENT, log);
                ApprovalEventEventResponse typedResponse = new ApprovalEventEventResponse();
                typedResponse.log = log;
                typedResponse.topic1 = (String) eventValues.getIndexedValues().get(0);
                typedResponse.topic2 = (String) eventValues.getIndexedValues().get(1);
                typedResponse.arg1 = (Uint128) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Observable<ApprovalEventEventResponse> approvalEventEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        PlatonFilter filter = new PlatonFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(WasmEventEncoder.encode(APPROVALEVENT_EVENT));
        return approvalEventEventObservable(filter);
    }

    public RemoteCall<TransactionReceipt> SignTransaction(Uint32 transaction_id) {
        final WasmFunction function = new WasmFunction(FUNC_SIGNTRANSACTION, Arrays.asList(transaction_id), Void.class);
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> SignTransaction(Uint32 transaction_id, BigInteger vonValue) {
        final WasmFunction function = new WasmFunction(FUNC_SIGNTRANSACTION, Arrays.asList(transaction_id), Void.class);
        return executeRemoteCallTransaction(function, vonValue);
    }

    public static RemoteCall<Multisig> deploy(Web3j web3j, Credentials credentials, GasProvider contractGasProvider, Long chainId, WasmAddress[] owners, Uint16 required) {
        String encodedConstructor = WasmFunctionEncoder.encodeConstructor(BINARY, Arrays.asList(owners,required));
        return deployRemoteCall(Multisig.class, web3j, credentials, contractGasProvider, encodedConstructor, chainId);
    }

    public static RemoteCall<Multisig> deploy(Web3j web3j, TransactionManager transactionManager, GasProvider contractGasProvider, Long chainId, WasmAddress[] owners, Uint16 required) {
        String encodedConstructor = WasmFunctionEncoder.encodeConstructor(BINARY, Arrays.asList(owners,required));
        return deployRemoteCall(Multisig.class, web3j, transactionManager, contractGasProvider, encodedConstructor, chainId);
    }

    public static RemoteCall<Multisig> deploy(Web3j web3j, Credentials credentials, GasProvider contractGasProvider, BigInteger initialVonValue, Long chainId, WasmAddress[] owners, Uint16 required) {
        String encodedConstructor = WasmFunctionEncoder.encodeConstructor(BINARY, Arrays.asList(owners,required));
        return deployRemoteCall(Multisig.class, web3j, credentials, contractGasProvider, encodedConstructor, initialVonValue, chainId);
    }

    public static RemoteCall<Multisig> deploy(Web3j web3j, TransactionManager transactionManager, GasProvider contractGasProvider, BigInteger initialVonValue, Long chainId, WasmAddress[] owners, Uint16 required) {
        String encodedConstructor = WasmFunctionEncoder.encodeConstructor(BINARY, Arrays.asList(owners,required));
        return deployRemoteCall(Multisig.class, web3j, transactionManager, contractGasProvider, encodedConstructor, initialVonValue, chainId);
    }

    public RemoteCall<TransactionReceipt> ChangeOwnersAndRequired(WasmAddress[] owners, Uint16 required, Uint32 second_limit) {
        final WasmFunction function = new WasmFunction(FUNC_CHANGEOWNERSANDREQUIRED, Arrays.asList(owners,required,second_limit), Void.class);
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> ChangeOwnersAndRequired(WasmAddress[] owners, Uint16 required, Uint32 second_limit, BigInteger vonValue) {
        final WasmFunction function = new WasmFunction(FUNC_CHANGEOWNERSANDREQUIRED, Arrays.asList(owners,required,second_limit), Void.class);
        return executeRemoteCallTransaction(function, vonValue);
    }

    public RemoteCall<WasmAddress[]> GetOwners() {
        final WasmFunction function = new WasmFunction(FUNC_GETOWNERS, Arrays.asList(), WasmAddress[].class);
        return executeRemoteCall(function, WasmAddress[].class);
    }

    public RemoteCall<TransactionReceipt> CreateContract(byte[] args, Uint32 second_limit) {
        final WasmFunction function = new WasmFunction(FUNC_CREATECONTRACT, Arrays.asList(args,second_limit), Void.class);
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> CreateContract(byte[] args, Uint32 second_limit, BigInteger vonValue) {
        final WasmFunction function = new WasmFunction(FUNC_CREATECONTRACT, Arrays.asList(args,second_limit), Void.class);
        return executeRemoteCallTransaction(function, vonValue);
    }

    public RemoteCall<TransactionReceipt> CloneContract(WasmAddress address, byte[] args, Uint32 second_limit) {
        final WasmFunction function = new WasmFunction(FUNC_CLONECONTRACT, Arrays.asList(address,args,second_limit), Void.class);
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> CloneContract(WasmAddress address, byte[] args, Uint32 second_limit, BigInteger vonValue) {
        final WasmFunction function = new WasmFunction(FUNC_CLONECONTRACT, Arrays.asList(address,args,second_limit), Void.class);
        return executeRemoteCallTransaction(function, vonValue);
    }

    public RemoteCall<TransactionReceipt> PushTransaction(WasmAddress to, byte[] paras, Uint32 second_limit) {
        final WasmFunction function = new WasmFunction(FUNC_PUSHTRANSACTION, Arrays.asList(to,paras,second_limit), Void.class);
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> PushTransaction(WasmAddress to, byte[] paras, Uint32 second_limit, BigInteger vonValue) {
        final WasmFunction function = new WasmFunction(FUNC_PUSHTRANSACTION, Arrays.asList(to,paras,second_limit), Void.class);
        return executeRemoteCallTransaction(function, vonValue);
    }

    public RemoteCall<Transaction> GetTransactionInfo(Uint32 transaction_id) {
        final WasmFunction function = new WasmFunction(FUNC_GETTRANSACTIONINFO, Arrays.asList(transaction_id), Transaction.class);
        return executeRemoteCall(function, Transaction.class);
    }

    public static Multisig load(String contractAddress, Web3j web3j, Credentials credentials, GasProvider contractGasProvider, Long chainId) {
        return new Multisig(contractAddress, web3j, credentials, contractGasProvider, chainId);
    }

    public static Multisig load(String contractAddress, Web3j web3j, TransactionManager transactionManager, GasProvider contractGasProvider, Long chainId) {
        return new Multisig(contractAddress, web3j, transactionManager, contractGasProvider, chainId);
    }

    public static class PrivacyRevertEventEventResponse {
        public Log log;

        public String arg1;
    }

    public static class Transaction {
        public WasmAddress sender_;

        public WasmAddress to_;

        public byte[] paras_;

        public Int64 timestamp_;

        public Uint32 secondLimit_;

        public WasmAddress[] signedAddress_;
    }

    public static class MultisigCreateEventResponse {
        public Log log;

        public String topic1;

        public String topic2;

        public WasmAddress arg1;
    }

    public static class CreateMultisigEventResponse {
        public Log log;

        public String topic;

        public WasmAddress[] arg1;

        public Uint16 arg2;
    }

    public static class ChangeMultisigEventResponse {
        public Log log;

        public String topic;

        public WasmAddress[] arg1;

        public Uint16 arg2;
    }

    public static class NewMultisigTransactionEventResponse {
        public Log log;

        public String topic1;

        public String topic2;

        public WasmAddress arg1;

        public WasmAddress arg2;

        public byte[] arg3;

        public Uint32 arg4;
    }

    public static class SignMultisigTransactionEventResponse {
        public Log log;

        public String topic1;

        public String topic2;

        public WasmAddress arg1;
    }

    public static class MultisigTransactionTimeoutEventResponse {
        public Log log;

        public String topic1;

        public String topic2;
    }

    public static class MultisigTransactionExecuteEventResponse {
        public Log log;

        public String topic1;

        public String topic2;

        public WasmAddress[] arg1;
    }

    public static class MultisigCloneEventResponse {
        public Log log;

        public String topic1;

        public String topic2;

        public WasmAddress arg1;
    }

    public static class TransferEventEventResponse {
        public Log log;

        public String topic1;

        public String topic2;

        public Uint128 arg1;
    }

    public static class ApprovalEventEventResponse {
        public Log log;

        public String topic1;

        public String topic2;

        public Uint128 arg1;
    }
}
