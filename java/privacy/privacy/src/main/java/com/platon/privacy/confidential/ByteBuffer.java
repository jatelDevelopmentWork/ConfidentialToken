package com.platon.privacy.confidential;

import com.ochafik.lang.jnaerator.runtime.Structure;
import com.sun.jna.Pointer;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : /usr/include/stdint.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ByteBuffer extends Structure<ByteBuffer, ByteBuffer.ByValue, ByteBuffer.ByReference > {
    public long len;
    /** C type : uint8_t* */
    public Pointer data;
    public ByteBuffer() {
        super();
    }
    protected List<? > getFieldOrder() {
        return Arrays.asList("len", "data");
    }
    /** @param data C type : uint8_t* */
    public ByteBuffer(long len, Pointer data) {
        super();
        this.len = len;
        this.data = data;
    }
    public ByteBuffer(Pointer peer) {
        super(peer);
    }
    protected ByReference newByReference() { return new ByReference(); }
    protected ByValue newByValue() { return new ByValue(); }
    protected ByteBuffer newInstance() { return new ByteBuffer(); }
    public static ByteBuffer[] newArray(int arrayLength) {
        return Structure.newArray(ByteBuffer.class, arrayLength);
    }
    public static class ByReference extends ByteBuffer implements Structure.ByReference {

    };
    public static class ByValue extends ByteBuffer implements Structure.ByValue {

    };
}
