package com.platon.privacy.confidential;

import com.ochafik.lang.jnaerator.runtime.Structure;
import com.sun.jna.Pointer;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : /usr/include/stdint.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ExternError extends Structure<ExternError, ExternError.ByValue, ExternError.ByReference > {
    public int code;
    /**
     * error message<br>
     * C type : char*
     */
    public Pointer message;
    public ExternError() {
        super();
    }
    protected List<? > getFieldOrder() {
        return Arrays.asList("code", "message");
    }
    /**
     * @param message error message<br>
     * C type : char*
     */
    public ExternError(int code, Pointer message) {
        super();
        this.code = code;
        this.message = message;
    }
    public ExternError(Pointer peer) {
        super(peer);
    }
    protected ByReference newByReference() { return new ByReference(); }
    protected ByValue newByValue() { return new ByValue(); }
    protected ExternError newInstance() { return new ExternError(); }
    public static ExternError[] newArray(int arrayLength) {
        return Structure.newArray(ExternError.class, arrayLength);
    }
    public static class ByReference extends ExternError implements Structure.ByReference {

    };
    public static class ByValue extends ExternError implements Structure.ByValue {

    };
}

